# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'D:\1_university\Anul III\1_Sem1\BD\BD-Tema\interfata.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from newAnime import Ui_AnimeWindow
from newManga import Ui_MangaWindow
from AnimeList import Ui_AnimeListWindow
from MangaList import Ui_MangaListWindow
from modifyAnime import Ui_AnimeModifyWindow
from modifyManga import Ui_MangaModifyWindow
from newAuthor import Ui_AuthorWindow
from newStudio import Ui_StudioWindow
import sqlite3 as sl

class Ui_MainWindow(object):

    def newAnime(self): #deschid fereastra pt a introduce anime nou
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_AnimeWindow()
        self.ui.setupUi(self.window, MainWindow)
        self.window.show()
        MainWindow.hide()

    def newStudio(self):                                    #DESCHID FEREASTRA NEWSTUDIO
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_StudioWindow()
        self.ui.setupUi(self.window)
        self.window.show()

    def newAuthor(self):                        #DECHID FEREASTRA NEWAUTHOR
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_AuthorWindow()
        self.ui.setupUi(self.window)
        self.window.show()

    def newManga(self): #deschid fereastra pt a introduce manga noua
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_MangaWindow()
        self.ui.setupUi(self.window, MainWindow)
        self.window.show()
        MainWindow.hide()

    def viewAnimeList(self): #deschid fereastra pt a vedea animeList
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_AnimeListWindow()
        self.ui.setupUi(self.window, MainWindow)
        self.window.show()
        #MainWindow.hide()


        # ALL ANIME
        cursor.execute("SELECT * from Anime ")
        results = cursor.fetchall()
        #print(results)
        contor_linii = 0
        contor_coloane = 0
        for r in results:
            #print(contor_linii)
            titlu = self.ui.tableWidget.item(contor_linii, contor_coloane)
            autor = self.ui.tableWidget.item(contor_linii,contor_coloane+1)
            studio = self.ui.tableWidget.item(contor_linii,contor_coloane+2)
            genre = self.ui.tableWidget.item(contor_linii,contor_coloane+3)
            status = self.ui.tableWidget.item(contor_linii,contor_coloane+4)
            score = self.ui.tableWidget.item(contor_linii,contor_coloane+5)
            progres = self.ui.tableWidget.item(contor_linii,contor_coloane+6)


            id_autor = str(r[7])
            buff_autor = "Select first_name,last_name from Author where author_id = " + str(id_autor)
            #print(buff_autor)
            cursor.execute(buff_autor)
            rez = cursor.fetchall()
            #print(rez[0])


            id_studio = str(r[8])
            buff_studio = "Select studio_name from Studio where studio_id = " + id_studio
            cursor.execute(buff_studio)
            rez_studio = cursor.fetchall()
            #print(rez_studio[0])
            autor.setText(str(rez[0][0]) + " " + str(rez[0][1]))
            titlu.setText(str(r[0]))
            studio.setText(str(rez_studio[0][0]))
            genre.setText(str(r[1]))
            score.setText(str(r[2]))
            progres.setText(str(r[5]) + "/" + str(r[4]))
            status.setText(str(r[3]))

            contor_linii = contor_linii + 1

        # WATCHING
        cursor.execute("SELECT * from Anime where status = 'Watching'")
        rez_w = cursor.fetchall()
        #print(rez_w)

        contor_linii = 0
        contor_coloane = 0
        for r in rez_w:
            titlu = self.ui.tableWidget_2.item(contor_linii, contor_coloane)
            autor = self.ui.tableWidget_2.item(contor_linii, contor_coloane + 1)
            studio = self.ui.tableWidget_2.item(contor_linii, contor_coloane + 2)
            genre = self.ui.tableWidget_2.item(contor_linii, contor_coloane + 3)
            status = self.ui.tableWidget_2.item(contor_linii, contor_coloane + 4)
            score = self.ui.tableWidget_2.item(contor_linii, contor_coloane + 5)
            progres = self.ui.tableWidget_2.item(contor_linii, contor_coloane + 6)

            titlu.setText(str(r[0]))
            id_autor = str(r[7])
            buff_autor = "Select first_name,last_name from Author where author_id = " + str(id_autor)
            #print(buff_autor)
            cursor.execute(buff_autor)
            rez = cursor.fetchall()
            #print(rez[0])
            autor.setText(str(rez[0][0]) + " " + str(rez[0][1]))

            id_studio = str(r[8])
            buff_studio = "Select studio_name from Studio where studio_id = " + id_studio
            cursor.execute(buff_studio)
            rez_studio = cursor.fetchall()
            #print(rez_studio[0])
            studio.setText(str(rez_studio[0][0]))
            genre.setText(str(r[1]))
            score.setText(str(r[2]))
            progres.setText(str(r[5]) + "/" + str(r[4]))
            status.setText(str(r[3]))

            contor_linii = contor_linii + 1

        #Completed
        cursor.execute("SELECT * from Anime where status = 'Completed'")
        rez_c = cursor.fetchall()
        #print(rez_c)

        contor_linii = 0
        contor_coloane = 0
        for r in rez_c:
            titlu = self.ui.tableWidget_3.item(contor_linii, contor_coloane)
            autor = self.ui.tableWidget_3.item(contor_linii, contor_coloane + 1)
            studio = self.ui.tableWidget_3.item(contor_linii, contor_coloane + 2)
            genre = self.ui.tableWidget_3.item(contor_linii, contor_coloane + 3)
            status = self.ui.tableWidget_3.item(contor_linii, contor_coloane + 4)
            score = self.ui.tableWidget_3.item(contor_linii, contor_coloane + 5)
            progres = self.ui.tableWidget_3.item(contor_linii, contor_coloane + 6)

            titlu.setText(str(r[0]))
            id_autor = str(r[7])
            buff_autor = "Select first_name,last_name from Author where author_id = " + str(id_autor)
            #print(buff_autor)
            cursor.execute(buff_autor)
            rez = cursor.fetchall()
            #print(rez[0])
            autor.setText(str(rez[0][0]) + " " + str(rez[0][1]))

            id_studio = str(r[8])
            buff_studio = "Select studio_name from Studio where studio_id = " + id_studio
            cursor.execute(buff_studio)
            rez_studio = cursor.fetchall()
            #print(rez_studio[0])
            studio.setText(str(rez_studio[0][0]))
            genre.setText(str(r[1]))
            score.setText(str(r[2]))
            progres.setText(str(r[5]) + "/" + str(r[4]))
            status.setText(str(r[3]))

            contor_linii = contor_linii + 1

        # On Hold
        cursor.execute("SELECT * from Anime where status = 'OnHold'")
        rez_oh= cursor.fetchall()
        #print(rez_oh)

        contor_linii = 0
        contor_coloane = 0
        for r in rez_oh:
            titlu = self.ui.tableWidget_4.item(contor_linii, contor_coloane)
            autor = self.ui.tableWidget_4.item(contor_linii, contor_coloane + 1)
            studio = self.ui.tableWidget_4.item(contor_linii, contor_coloane + 2)
            genre = self.ui.tableWidget_4.item(contor_linii, contor_coloane + 3)
            status = self.ui.tableWidget_4.item(contor_linii, contor_coloane + 4)
            score = self.ui.tableWidget_4.item(contor_linii, contor_coloane + 5)
            progres = self.ui.tableWidget_4.item(contor_linii, contor_coloane + 6)

            titlu.setText(str(r[0]))
            id_autor = str(r[7])
            buff_autor = "Select first_name,last_name from Author where author_id = " + str(id_autor)
            #print(buff_autor)
            cursor.execute(buff_autor)
            rez = cursor.fetchall()
            #print(rez[0])
            autor.setText(str(rez[0][0]) + " " + str(rez[0][1]))

            id_studio = str(r[8])
            buff_studio = "Select studio_name from Studio where studio_id = " + id_studio
            cursor.execute(buff_studio)
            rez_studio = cursor.fetchall()
            #print(rez_studio[0])
            studio.setText(str(rez_studio[0][0]))
            genre.setText(str(r[1]))
            score.setText(str(r[2]))
            progres.setText(str(r[5]) + "/" + str(r[4]))
            status.setText(str(r[3]))

            contor_linii = contor_linii + 1

        # Dropped
        cursor.execute("SELECT * from Anime where status = 'Dropped'")
        rez_c = cursor.fetchall()
        #print(rez_c)

        contor_linii = 0
        contor_coloane = 0
        for r in rez_c:
            titlu = self.ui.tableWidget_5.item(contor_linii, contor_coloane)
            autor = self.ui.tableWidget_5.item(contor_linii, contor_coloane + 1)
            studio = self.ui.tableWidget_5.item(contor_linii, contor_coloane + 2)
            genre = self.ui.tableWidget_5.item(contor_linii, contor_coloane + 3)
            status = self.ui.tableWidget_5.item(contor_linii, contor_coloane + 4)
            score = self.ui.tableWidget_5.item(contor_linii, contor_coloane + 5)
            progres = self.ui.tableWidget_5.item(contor_linii, contor_coloane + 6)

            titlu.setText(str(r[0]))
            id_autor = str(r[7])
            buff_autor = "Select first_name,last_name from Author where author_id = " + str(id_autor)
            #print(buff_autor)
            cursor.execute(buff_autor)
            rez = cursor.fetchall()
            #print(rez[0])
            autor.setText(str(rez[0][0]) + " " + str(rez[0][1]))

            id_studio = str(r[8])
            buff_studio = "Select studio_name from Studio where studio_id = " + id_studio
            cursor.execute(buff_studio)
            rez_studio = cursor.fetchall()
            #print(rez_studio[0])
            studio.setText(str(rez_studio[0][0]))
            genre.setText(str(r[1]))
            score.setText(str(r[2]))
            progres.setText(str(r[5]) + "/" + str(r[4]))
            status.setText(str(r[3]))

            contor_linii = contor_linii + 1

        # Plan to Watch
        cursor.execute("SELECT * from Anime where status = 'PlanToWatch'")
        rez_c = cursor.fetchall()
        #print(rez_c)

        contor_linii = 0
        contor_coloane = 0
        for r in rez_c:
            titlu = self.ui.tableWidget_6.item(contor_linii, contor_coloane)
            autor = self.ui.tableWidget_6.item(contor_linii, contor_coloane + 1)
            studio = self.ui.tableWidget_6.item(contor_linii, contor_coloane + 2)
            genre = self.ui.tableWidget_6.item(contor_linii, contor_coloane + 3)
            status = self.ui.tableWidget_6.item(contor_linii, contor_coloane + 4)
            score = self.ui.tableWidget_6.item(contor_linii, contor_coloane + 5)
            progres = self.ui.tableWidget_6.item(contor_linii, contor_coloane + 6)

            titlu.setText(str(r[0]))
            id_autor = str(r[7])
            buff_autor = "Select first_name,last_name from Author where author_id = " + str(id_autor)
            #print(buff_autor)
            cursor.execute(buff_autor)
            rez = cursor.fetchall()
            #print(rez[0])
            autor.setText(str(rez[0][0]) + " " + str(rez[0][1]))

            id_studio = str(r[8])
            buff_studio = "Select studio_name from Studio where studio_id = " + id_studio
            cursor.execute(buff_studio)
            rez_studio = cursor.fetchall()
            #print(rez_studio[0])
            studio.setText(str(rez_studio[0][0]))
            genre.setText(str(r[1]))
            score.setText(str(r[2]))
            progres.setText(str(r[5]) + "/" + str(r[4]))
            status.setText(str(r[3]))

            contor_linii = contor_linii + 1



    def viewMangaList(self): #deschid fereastra pt a vedea mangaList
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_MangaListWindow()
        self.ui.setupUi(self.window, MainWindow)
        self.window.show()
        #MainWindow.hide()


        # ALL MANGA
        cursor.execute("SELECT * from Manga")
        results = cursor.fetchall()
        print(results)
        contor_linii = 0
        contor_coloane = 0
        for r in results:
            #print(contor_linii)
            titlu = self.ui.tableWidget.item(contor_linii, contor_coloane)
            autor = self.ui.tableWidget.item(contor_linii, contor_coloane + 1)
            genre = self.ui.tableWidget.item(contor_linii, contor_coloane + 2)
            status = self.ui.tableWidget.item(contor_linii, contor_coloane + 3)
            score = self.ui.tableWidget.item(contor_linii, contor_coloane + 4)
            progres = self.ui.tableWidget.item(contor_linii, contor_coloane + 5)

            titlu.setText(str(r[0]))

            id_autor = str(r[7])
            buff_autor = "Select first_name,last_name from Author where author_id = " + str(id_autor)
            #print(buff_autor)
            cursor.execute(buff_autor)
            rez = cursor.fetchall()
            print(rez[0])
            autor.setText(str(rez[0][0]) + " " + str(rez[0][1]))



            genre.setText(str(r[1]))
            score.setText(str(r[2]))
            progres.setText(str(r[5]) + "/" + str(r[4]))
            status.setText(str(r[3]))

            contor_linii = contor_linii + 1


        # Reading
        cursor.execute("SELECT * from Manga where status = 'Reading'")
        rez_w = cursor.fetchall()
        # print(rez_w)

        contor_linii = 0
        contor_coloane = 0
        for r in rez_w:
            titlu = self.ui.tableWidget_2.item(contor_linii, contor_coloane)
            autor = self.ui.tableWidget_2.item(contor_linii, contor_coloane + 1)
            genre = self.ui.tableWidget_2.item(contor_linii, contor_coloane + 2)
            status = self.ui.tableWidget_2.item(contor_linii, contor_coloane + 3)
            score = self.ui.tableWidget_2.item(contor_linii, contor_coloane + 4)
            progres = self.ui.tableWidget_2.item(contor_linii, contor_coloane + 5)

            titlu.setText(str(r[0]))
            id_autor = str(r[7])
            buff_autor = "Select first_name,last_name from Author where author_id = " + str(id_autor)
            # print(buff_autor)
            cursor.execute(buff_autor)
            rez = cursor.fetchall()
            # print(rez[0])
            autor.setText(str(rez[0][0]) + " " + str(rez[0][1]))

            genre.setText(str(r[1]))
            score.setText(str(r[2]))
            progres.setText(str(r[5]) + "/" + str(r[4]))
            status.setText(str(r[3]))

            contor_linii = contor_linii + 1


        # Completed
        cursor.execute("SELECT * from Manga where status = 'Completed'")
        rez_c = cursor.fetchall()
        # print(rez_c)

        contor_linii = 0
        contor_coloane = 0
        for r in rez_c:
            titlu = self.ui.tableWidget_3.item(contor_linii, contor_coloane)
            autor = self.ui.tableWidget_3.item(contor_linii, contor_coloane + 1)
            genre = self.ui.tableWidget_3.item(contor_linii, contor_coloane + 2)
            status = self.ui.tableWidget_3.item(contor_linii, contor_coloane + 3)
            score = self.ui.tableWidget_3.item(contor_linii, contor_coloane + 4)
            progres = self.ui.tableWidget_3.item(contor_linii, contor_coloane + 5)

            titlu.setText(str(r[0]))
            id_autor = str(r[7])
            buff_autor = "Select first_name,last_name from Author where author_id = " + str(id_autor)
            # print(buff_autor)
            cursor.execute(buff_autor)
            rez = cursor.fetchall()
            # print(rez[0])
            autor.setText(str(rez[0][0]) + " " + str(rez[0][1]))

            genre.setText(str(r[1]))
            score.setText(str(r[2]))
            progres.setText(str(r[5]) + "/" + str(r[4]))
            status.setText(str(r[3]))

            contor_linii = contor_linii + 1

        # On Hold
        cursor.execute("SELECT * from Manga where status = 'OnHold'")
        rez_oh = cursor.fetchall()
        # print(rez_oh)

        contor_linii = 0
        contor_coloane = 0
        for r in rez_oh:
            titlu = self.ui.tableWidget_4.item(contor_linii, contor_coloane)
            autor = self.ui.tableWidget_4.item(contor_linii, contor_coloane + 1)
            genre = self.ui.tableWidget_4.item(contor_linii, contor_coloane + 2)
            status = self.ui.tableWidget_4.item(contor_linii, contor_coloane + 3)
            score = self.ui.tableWidget_4.item(contor_linii, contor_coloane + 4)
            progres = self.ui.tableWidget_4.item(contor_linii, contor_coloane + 5)

            titlu.setText(str(r[0]))
            id_autor = str(r[7])
            buff_autor = "Select first_name,last_name from Author where author_id = " + str(id_autor)
            # print(buff_autor)
            cursor.execute(buff_autor)
            rez = cursor.fetchall()
            # print(rez[0])
            autor.setText(str(rez[0][0]) + " " + str(rez[0][1]))

            genre.setText(str(r[1]))
            score.setText(str(r[2]))
            progres.setText(str(r[5]) + "/" + str(r[4]))
            status.setText(str(r[3]))

            contor_linii = contor_linii + 1

        # Dropped
        cursor.execute("SELECT * from Manga where status = 'Dropped'")
        rez_c = cursor.fetchall()
        # print(rez_c)

        contor_linii = 0
        contor_coloane = 0
        for r in rez_c:
            titlu = self.ui.tableWidget_5.item(contor_linii, contor_coloane)
            autor = self.ui.tableWidget_5.item(contor_linii, contor_coloane + 1)
            genre = self.ui.tableWidget_5.item(contor_linii, contor_coloane + 2)
            status = self.ui.tableWidget_5.item(contor_linii, contor_coloane + 3)
            score = self.ui.tableWidget_5.item(contor_linii, contor_coloane + 4)
            progres = self.ui.tableWidget_5.item(contor_linii, contor_coloane + 5)

            titlu.setText(str(r[0]))
            id_autor = str(r[7])
            buff_autor = "Select first_name,last_name from Author where author_id = " + str(id_autor)
            # print(buff_autor)
            cursor.execute(buff_autor)
            rez = cursor.fetchall()
            # print(rez[0])
            autor.setText(str(rez[0][0]) + " " + str(rez[0][1]))

            genre.setText(str(r[1]))
            score.setText(str(r[2]))
            progres.setText(str(r[5]) + "/" + str(r[4]))
            status.setText(str(r[3]))

            contor_linii = contor_linii + 1

        # Plan to Watch
        cursor.execute("SELECT * from Manga where status = 'PlanToRead'")
        rez_c = cursor.fetchall()
        # print(rez_c)

        contor_linii = 0
        contor_coloane = 0
        for r in rez_c:
            titlu = self.ui.tableWidget_6.item(contor_linii, contor_coloane)
            autor = self.ui.tableWidget_6.item(contor_linii, contor_coloane + 1)
            genre = self.ui.tableWidget_6.item(contor_linii, contor_coloane + 2)
            status = self.ui.tableWidget_6.item(contor_linii, contor_coloane + 3)
            score = self.ui.tableWidget_6.item(contor_linii, contor_coloane + 4)
            progres = self.ui.tableWidget_6.item(contor_linii, contor_coloane + 5)

            titlu.setText(str(r[0]))
            id_autor = str(r[7])
            buff_autor = "Select first_name,last_name from Author where author_id = " + str(id_autor)
            # print(buff_autor)
            cursor.execute(buff_autor)
            rez = cursor.fetchall()
            # print(rez[0])
            autor.setText(str(rez[0][0]) + " " + str(rez[0][1]))

            genre.setText(str(r[1]))
            score.setText(str(r[2]))
            progres.setText(str(r[5]) + "/" + str(r[4]))
            status.setText(str(r[3]))

            contor_linii = contor_linii + 1


    def modifyAnime(self):
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_AnimeModifyWindow()
        self.ui.setupUi(self.window, MainWindow)
        self.window.show()
        #MainWindow.hide()

    def modifyManga(self):
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_MangaModifyWindow()
        self.ui.setupUi(self.window, MainWindow)
        self.window.show()
        #MainWindow.hide()

    def setupUi(self, MainWindow):
        #MAIN WINDOW
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(805, 700)
        MainWindow.setMinimumSize(QtCore.QSize(805, 700))
        MainWindow.setMaximumSize(QtCore.QSize(805, 700))
        font = QtGui.QFont()
        font.setFamily("Nirmala UI Semilight")
        font.setPointSize(8)
        MainWindow.setFont(font)
        MainWindow.setStyleSheet("background-color:rgb(151, 232, 255);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.stackedWidget = QtWidgets.QStackedWidget(self.centralwidget)
        self.stackedWidget.setGeometry(QtCore.QRect(360, 130, 391, 501))
        self.stackedWidget.setObjectName("stackedWidget")
        self.page = QtWidgets.QWidget()
        self.page.setObjectName("page")

        #EXIT_BUTTON
        self.exitButton = QtWidgets.QPushButton(self.centralwidget)
        self.exitButton.clicked.connect(lambda: MainWindow.close())
        self.exitButton.setGeometry(QtCore.QRect(30, 490, 231, 91))
        font = QtGui.QFont()
        font.setFamily("Nirmala UI Semilight")
        font.setPointSize(15)
        self.exitButton.setFont(font)
        self.exitButton.setStyleSheet("QPushButton{\n"
"    background: pink;\n"
"    border: 2px solid rgb(151, 232, 255);\n"
"    border-radius: 20px;\n"
"    color: black;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    background-color:rgb(206, 164, 196);\n"
"    border: 2px solid rgb(206, 164, 196);\n"
"}")
        self.exitButton.setObjectName("exitButton")

        #TITLE LABEL
        self.titlelabel = QtWidgets.QLabel(self.centralwidget)
        self.titlelabel.setGeometry(QtCore.QRect(290, 10, 201, 71))
        font = QtGui.QFont()
        font.setFamily("Nirmala UI Semilight")
        font.setPointSize(20)
        self.titlelabel.setFont(font)
        self.titlelabel.setStyleSheet("QLabel\n"
"{\n"
"    color: rgb(60, 60, 60);\n"
"    background-color: pink;\n"
"    border: 1px solid rgb(60, 60, 60);\n"
"    border-radius: 10px;\n"
"}")
        self.titlelabel.setObjectName("titlelabel")

        #NEW ANIME BUTTON
        self.newAnimeButton = QtWidgets.QPushButton(self.page)
        self.newAnimeButton.setGeometry(QtCore.QRect(90, 270, 231, 91))
        self.newAnimeButton.clicked.connect(self.newAnime)
        font = QtGui.QFont()
        font.setFamily("Nirmala UI Semilight")
        font.setPointSize(15)
        self.newAnimeButton.setFont(font)
        self.newAnimeButton.setStyleSheet("QPushButton{\n"
"    background: pink;\n"
"    border: 2px solid rgb(151, 232, 255);\n"
"    border-radius: 20px;\n"
"    color: black;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    background-color:rgb(206, 164, 196);\n"
"    border: 2px solid rgb(206, 164, 196);\n"
"}")
        self.newAnimeButton.setObjectName("newAnimeButton")

        #VIEW ANIMELIST BUTTON
        self.animeListButton = QtWidgets.QPushButton(self.page)
        self.animeListButton.setGeometry(QtCore.QRect(90, 40, 231, 91))
        font = QtGui.QFont()
        font.setFamily("Nirmala UI Semilight")
        font.setPointSize(15)
        self.animeListButton.setFont(font)
        self.animeListButton.setStyleSheet("QPushButton{\n"
"    background: pink;\n"
"    border: 2px solid rgb(151, 232, 255);\n"
"    border-radius: 20px;\n"
"    color: black;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    background-color:rgb(206, 164, 196);\n"
"    border: 2px solid rgb(206, 164, 196);\n"
"}")
        self.animeListButton.setObjectName("animeListButton")
        self.animeListButton.clicked.connect(self.viewAnimeList)

        # new Studio BUTTON

        self.newStudioButton = QtWidgets.QPushButton(self.page)
        self.newStudioButton.setGeometry(QtCore.QRect(90, 380, 231, 91))
        font = QtGui.QFont()
        font.setFamily("Nirmala UI Semilight")
        font.setPointSize(15)
        self.newStudioButton.setFont(font)
        self.newStudioButton.setStyleSheet("QPushButton{\n"
                                          "    background: pink;\n"
                                          "    border: 2px solid rgb(151, 232, 255);\n"
                                          "    border-radius: 20px;\n"
                                          "    color: black;\n"
                                          "}\n"
                                          "\n"
                                          "QPushButton:hover{\n"
                                          "    background-color:rgb(206, 164, 196);\n"
                                          "    border: 2px solid rgb(206, 164, 196);\n"
                                          "}")
        self.newStudioButton.setObjectName("pushButton_18")
        self.newStudioButton.clicked.connect(self.newStudio)

        self.stackedWidget.addWidget(self.page)
        self.page_2 = QtWidgets.QWidget()
        self.page_2.setObjectName("page_2")

        #PIC LABEL
        self.picLabel = QtWidgets.QLabel(self.centralwidget)
        self.picLabel.setGeometry(QtCore.QRect(70, 20, 131, 161))
        self.picLabel.setText("")
        self.picLabel.setPixmap(QtGui.QPixmap("resources\\anya.png"))
        self.picLabel.setScaledContents(True)
        self.picLabel.setObjectName("picLabel")

        #MODIFY ANIMELIST BUTTON
        self.modifyAnimeListButton = QtWidgets.QPushButton(self.page)
        self.modifyAnimeListButton.clicked.connect(self.modifyAnime)
        self.modifyAnimeListButton.setGeometry(QtCore.QRect(90, 150, 231, 91))
        font = QtGui.QFont()
        font.setFamily("Nirmala UI Semilight")
        font.setPointSize(15)
        self.modifyAnimeListButton.setFont(font)
        self.modifyAnimeListButton.setStyleSheet("QPushButton{\n"
"    background: pink;\n"
"    border: 2px solid rgb(151, 232, 255);\n"
"    border-radius: 20px;\n"
"    color: black;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    background-color:rgb(206, 164, 196);\n"
"    border: 2px solid rgb(206, 164, 196);\n"
"}")
        self.modifyAnimeListButton.setObjectName("modifyAnimeListButton")

        #VIEW MANGALIST BUTTON
        self.mangaListButton = QtWidgets.QPushButton(self.page_2)
        self.mangaListButton.setGeometry(QtCore.QRect(90, 40, 231, 91))
        self.mangaListButton.clicked.connect(self.viewMangaList)
        font = QtGui.QFont()
        font.setFamily("Nirmala UI Semilight")
        font.setPointSize(15)
        self.mangaListButton.setFont(font)
        self.mangaListButton.setStyleSheet("QPushButton{\n"
"    background: pink;\n"
"    border: 2px solid rgb(151, 232, 255);\n"
"    border-radius: 20px;\n"
"    color: black;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    background-color:rgb(206, 164, 196);\n"
"    border: 2px solid rgb(206, 164, 196);\n"
"}")
        self.mangaListButton.setObjectName("mangaListButton")

        # new Author BUTTON

        self.newAuthorButton = QtWidgets.QPushButton(self.page_2)
        self.newAuthorButton.setGeometry(QtCore.QRect(90, 380, 231, 91))
        font = QtGui.QFont()
        font.setFamily("Nirmala UI Semilight")
        font.setPointSize(15)
        self.newAuthorButton.setFont(font)
        self.newAuthorButton.setStyleSheet("QPushButton{\n"
                                           "    background: pink;\n"
                                           "    border: 2px solid rgb(151, 232, 255);\n"
                                           "    border-radius: 20px;\n"
                                           "    color: black;\n"
                                           "}\n"
                                           "\n"
                                           "QPushButton:hover{\n"
                                           "    background-color:rgb(206, 164, 196);\n"
                                           "    border: 2px solid rgb(206, 164, 196);\n"
                                           "}")
        self.newAuthorButton.setObjectName("pushButton_18")
        self.newAuthorButton.clicked.connect(self.newAuthor)

        #MODIFY MANGALIST BUTTON
        self.modifyMangaListButton = QtWidgets.QPushButton(self.page_2)
        self.modifyMangaListButton.setGeometry(QtCore.QRect(90, 150, 231, 91))
        font = QtGui.QFont()
        font.setFamily("Nirmala UI Semilight")
        font.setPointSize(15)
        self.modifyMangaListButton.setFont(font)
        self.modifyMangaListButton.setStyleSheet("QPushButton{\n"
"    background: pink;\n"
"    border: 2px solid rgb(151, 232, 255);\n"
"    border-radius: 20px;\n"
"    color: black;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    background-color:rgb(206, 164, 196);\n"
"    border: 2px solid rgb(206, 164, 196);\n"
"}")
        self.modifyMangaListButton.setObjectName("modifyMangaListButton")
        self.modifyMangaListButton.clicked.connect(self.modifyManga)

        #NEW MANGA BUTTON
        self.newMangaButton = QtWidgets.QPushButton(self.page_2)
        self.newMangaButton.setGeometry(QtCore.QRect(90, 270, 231, 91))
        self.newMangaButton.clicked.connect(self.newManga)
        font = QtGui.QFont()
        font.setFamily("Nirmala UI Semilight")
        font.setPointSize(15)
        self.newMangaButton.setFont(font)
        self.newMangaButton.setStyleSheet("QPushButton{\n"
"    background: pink;\n"
"    border: 2px solid rgb(151, 232, 255);\n"
"    border-radius: 20px;\n"
"    color: black;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    background-color:rgb(206, 164, 196);\n"
"    border: 2px solid rgb(206, 164, 196);\n"
"}")
        self.newMangaButton.setObjectName("newMangaButton")
        MainWindow.setCentralWidget(self.centralwidget)


        self.stackedWidget.addWidget(self.page_2)

        # SELECT ANIME BUTTON
        self.selectAnimeButton = QtWidgets.QPushButton(self.centralwidget)
        self.selectAnimeButton.setGeometry(QtCore.QRect(30, 200, 231, 91))
        font = QtGui.QFont()
        font.setFamily("Nirmala UI Semilight")
        font.setPointSize(15)
        self.selectAnimeButton.setFont(font)
        self.selectAnimeButton.setStyleSheet("QPushButton{\n"
                                         "    background: pink;\n"
                                         "    border: 2px solid rgb(151, 232, 255);\n"
                                         "    border-radius: 20px;\n"
                                         "    color: black;\n"
                                         "}\n"
                                         "\n"
                                         "QPushButton:hover{\n"
                                         "    background-color:rgb(206, 164, 196);\n"
                                         "    border: 2px solid rgb(206, 164, 196);\n"
                                         "}")
        self.selectAnimeButton.setObjectName("selectAnimeButton")
        self.selectAnimeButton.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(self.stackedWidget.currentIndex() - 1))

        # SELECT MANGA BUTTON

        self.selectMangaButton = QtWidgets.QPushButton(self.centralwidget)
        self.selectMangaButton.setGeometry(QtCore.QRect(30, 340, 231, 91))
        font = QtGui.QFont()
        font.setFamily("Nirmala UI Semilight")
        font.setPointSize(15)
        self.selectMangaButton.setFont(font)
        self.selectMangaButton.setStyleSheet("QPushButton{\n"
                                         "    background: pink;\n"
                                         "    border: 2px solid rgb(151, 232, 255);\n"
                                         "    border-radius: 20px;\n"
                                         "    color: black;\n"
                                         "}\n"
                                         "\n"
                                         "QPushButton:hover{\n"
                                         "    background-color:rgb(206, 164, 196);\n"
                                         "    border: 2px solid rgb(206, 164, 196);\n"
                                         "}")
        self.selectMangaButton.setObjectName("selectMangaButton")
        self.selectMangaButton.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(self.stackedWidget.currentIndex() + 1))


        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 812, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.actionNew = QtWidgets.QAction(MainWindow)
        self.actionNew.setObjectName("actionNew")

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.exitButton.setText(_translate("MainWindow", "Exit"))
        self.titlelabel.setText(_translate("MainWindow", "MyAnimeList"))
        self.newAnimeButton.setText(_translate("MainWindow", "Add Anime"))
        self.animeListButton.setText(_translate("MainWindow", "View AnimeList"))
        self.modifyAnimeListButton.setText(_translate("MainWindow", "Modify AnimeList"))
        self.newStudioButton.setText(_translate("MainWindow", "Add Studio"))
        self.newAuthorButton.setText(_translate("MainWindow", "Add Author"))
        self.mangaListButton.setText(_translate("MainWindow", "View MangaList"))
        self.modifyMangaListButton.setText(_translate("MainWindow", "Modify MangaList"))
        self.newMangaButton.setText(_translate("MainWindow", "Add Manga"))
        self.actionNew.setText(_translate("MainWindow", "New"))
        self.selectAnimeButton.setText(_translate("MainWindow", "Anime"))
        self.selectMangaButton.setText(_translate("MainWindow", "Manga"))

if __name__ == "__main__":
    import sys

    con = sl.connect('TEMA.db')
    cursor = con.cursor()
    '''
       sql= "CREATE TABLE Anime_List( anime_id NUMBER(3),anime_name VARCHAR(50)," \
             "constraint anime_id_pk primary key(anime_id),constraint anime_name_uk unique(anime_name))"
        con.execute(sql)
        sql2 = "CREATE TABLE Manga_List( manga_id NUMBER(3),manga_name VARCHAR(50),constraint manga_id_pk primary key(manga_id)," \
               "constraint manga_name_uk unique(manga_name))"
        con.execute(sql2)

        sql = "CREATE TABLE Author( author_id NUMBER(3),first_name VARCHAR(25),last_name VARCHAR(25),date_of_birth DATE NOT NULL,constraint author_id_pk primary key(author_id))"
        con.execute(sql)
        sql2 = "CREATE TABLE Studio( studio_id NUMBER(3),studio_name VARCHAR(25),date_founded DATE NOT NULL,constraint studio_id_pk primary key(studio_id))"
        con.execute(sql2)

        sql="CREATE TABLE Anime(name VARCHAR(50),genre VARCHAR(20),score NUMBER(2),status VARCHAR(20),total_eps NUMBER(4) NOT NULL,eps_watched NUMBER(4)," \
            "anime_id NUMBER(3),author_id NUMBER(3),studio_id NUMBER(3)," \
            "constraint anime_id_fk foreign key(anime_id) references Anime_List(anime_id),"\
            "constraint author_id_fk foreign key(author_id) references Author(author_id),"\
            "constraint studio_id_fk foreign key(studio_id) references Studio(studio_id))"

        sql = "CREATE TABLE Manga(name VARCHAR(50),genre VARCHAR(20),score NUMBER(2),status VARCHAR(20),total_chapters NUMBER(4) NOT NULL,chapters_read NUMBER(4)," \
              "manga_id NUMBER(3),author_id NUMBER(3)," \
              "constraint manga_id_fk foreign key(manga_id) references Manga_List(manga_id)," \
              "constraint author_id_fk foreign key(author_id) references Author(author_id))"

        sql = 'INSERT INTO Manga_List (manga_id,manga_name) values( ?, ?)'
        data = [
            (500,'Jujutsu Kaisen')
        ]
        with con:
            con.executemany(sql, data)
        data2=[
            (501,'Chainsaw Man')
        ]
        with con:
            con.executemany(sql, data2)
        data3 = [
            (502, 'Demon Slayer')
        ]
        with con:
            con.executemany(sql, data3)

        data4 = [
            (503, 'Akatsuki no Yona')
        ]
        with con:
            con.executemany(sql, data4)
        data5 = [
            (504, 'Kusuriya no Hitorigato')
        ]
        with con:
            con.executemany(sql, data5)

        sql = 'INSERT INTO Manga(name,genre,score,status,total_chapters,chapters_read,manga_id,author_id) values( ?, ?,?,?,?,?,?,?)'
        data = [
            ('Jujutsu Kaisen','Action',10,'Reading',210,200,500,206)
        ]
        with con:
            con.executemany(sql, data)
        data2 = [
            ('Chainsaw Man','Action',0,'PlanToRead',100,0,501,207)
        ]
        with con:
            con.executemany(sql, data2)
        data3 = [
            ('Demon Slayer','Adventure',8,'Completed',207,207,502,208)
        ]
        with con:
            con.executemany(sql, data3)

        data4 = [
            ('Akatsuki no Yona','Fantasy',10,'Reading',260,230,503,509)
        ]
        with con:
            con.executemany(sql, data4)
        data5 = [
            ('Kusuriya no Hitorigato','Drama',7,'Reading',100,14,504,210)
        ]
        with con:
            con.executemany(sql, data5)

        sql = 'INSERT INTO Anime_List (anime_id,anime_name) values( ?, ?)'
        data = [
            (100,'Naruto')
        ]
        with con:
            con.executemany(sql, data)
        data2 = [
            (101,'Bleach')
        ]
        with con:
            con.executemany(sql, data2)
        data3 = [
            (102,'One Piece')
        ]
        with con:
            con.executemany(sql, data3)

        data4 = [
            (103,'Attack on titan')
        ]
        with con:
            con.executemany(sql, data4)
        data5 = [
            (104,'Death Note')
        ]
        with con:
            con.executemany(sql, data5)

        sql = 'INSERT INTO Studio (studio_id,studio_name,date_founded) values( ?, ?,?)'
        data = [
            (300,'Pierrot','2-MAY-1979')
        ]
        with con:
            con.executemany(sql, data)
        data2 = [
            (301,'Mappa','14-JUN-2011')
        ]
        with con:
            con.executemany(sql, data2)
        data3 = [
            (302,'WIT','1-JUN-2012')
        ]
        with con:
            con.executemany(sql, data3)

        data4 = [
            (303,'Madhouse','17-OCT-1972')
        ]
        with con:
            con.executemany(sql, data4)
        data5 = [
            (304,'Ghibli','15-JUN-1985')
        ]
        with con:
            con.executemany(sql, data5)

        sql = 'INSERT INTO Anime (name,genre,score,status,total_eps,eps_watched,anime_id,author_id,studio_id) values( ?, ?,?,?,?,?,?,?,?)'
        data2 = [
            ('Naruto','Action',7,'Completed',700,700,100,200,300)
        ]
        with con:
            con.executemany(sql, data2)
        data3 = [
            ('Bleach','Action',9,'Watching',366,152,101,201,300)
        ]
        with con:
            con.executemany(sql, data3)

        data4 = [
            ('One Piece','Adventure',0,'On Hold',1050,3,102,202,300)
        ]
        with con:
            con.executemany(sql, data4)
        data5 = [
            ('Attack on Titan','Action',10,'Completed',25,25,103,203,302)
        ]
        with con:
            con.executemany(sql, data5)

        sql = 'INSERT INTO Anime (name,genre,score,status,total_eps,eps_watched,anime_id,author_id,studio_id) values( ?, ?,?,?,?,?,?,?,?)'
        data6 = [
            ('Death Note','Psychological',10,'Completed',37,37,104,204,303)
        ]
        with con:
            con.executemany(sql, data6)

        cursor.execute('DROP TABLE Author')

        cursor.execute('DROP TABLE Studio')

        sql = 'INSERT INTO Author (author_id,first_name,last_name,date_of_birth) values( ?, ?,?,?)'
        data = [
            (200,'Masashi','Kishimoto','8-NOV-1974')
        ]
        with con:
            con.executemany(sql, data)
        data2 = [
            (201,'Tite','Kubo','26-JUN-1977')
        ]
        with con:
            con.executemany(sql, data2)
        data3 = [
            (202,'Eiichiro','Oda','1-JAN-1975')
        ]
        with con:
            con.executemany(sql, data3)
        data4 = [
            (203,'Hajime','Isayama','29-AUG-1986')
        ]
        with con:
            con.executemany(sql, data4)
        data5 = [
            (204,'Tsugumi','Ohba','22-FEB-1962')
        ]
        with con:
            con.executemany(sql, data5)

        data6 = [
            (205,'Takeshi','Obata','11-FEB-1969')
        ]
        with con:
            con.executemany(sql, data6)
        data11 = [
            (206,'Gege','Akutami','26-FEB-1992')
        ]
        with con:
            con.executemany(sql, data11)
        data7 = [
            (207, 'Tatsuki', 'Fujimoto', '10-OCT-1992')
        ]
        with con:
            con.executemany(sql, data7)
        data8 = [
            (208, 'Koyoharu', 'Gotouge', '5-MAY-1989')
        ]
        with con:
            con.executemany(sql, data8)

        data9 = [
            (209, 'Mizuho', 'Kusanagi', '3-FEB-1979')
        ]
        with con:
            con.executemany(sql, data9)
        data10 = [
            (210, 'Hyuuga', 'Natsu', '3-FEB-1990')
        ]
        with con:
            con.executemany(sql, data10)
        '''
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    uii = Ui_MainWindow()
    uii.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())